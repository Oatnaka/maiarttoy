# shop/views.py

from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth.decorators import login_required, user_passes_test 
from django.db.models import Sum, F 
from django.contrib.auth.forms import UserCreationForm
from django.contrib import messages
from django.db.models import Q 
from django.db import transaction 
from django.core.paginator import Paginator, EmptyPage
from django.contrib.auth.models import User
from django.http import JsonResponse, HttpRequest, HttpResponse
from django.views.decorators.http import require_POST 
from django.contrib.auth import views as auth_views 
from django import forms # ‡∏ï‡πâ‡∏≠‡∏á import forms ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ ModelForm 

from .models import Product, Cart, CartItem, Order, OrderItem, Payment
from .forms import UserProfileForm 

# ----------------------------------------------------------------------
# üí° ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å forms.py ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ ProductForm)
# ----------------------------------------------------------------------
class ProductForm(forms.ModelForm):
    """‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°/‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"""
    class Meta:
        model = Product
        fields = ['name', 'description', 'price', 'stock', 'image', 'is_active']
        widgets = {
            'description': forms.Textarea(attrs={'rows': 3, 'class': 'form-control'}),
            'price': forms.NumberInput(attrs={'class': 'form-control', 'step': '0.01'}),
            'stock': forms.NumberInput(attrs={'class': 'form-control'}),
            'name': forms.TextInput(attrs={'class': 'form-control'}),
            'image': forms.FileInput(attrs={'class': 'form-control'}),
            'is_active': forms.CheckboxInput(attrs={'class': 'form-check-input'}),
        }

# ----------------------------------------------------------------------
# 1. AUTHENTICATION & PROFILE
# ----------------------------------------------------------------------

def custom_login_redirect(request):
    """
    ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏•‡∏±‡∏á‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á
    - Staff/Admin ‡πÑ‡∏õ‡∏ó‡∏µ‡πà /admin/
    - Customer/‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ ‡πÑ‡∏õ‡∏ó‡∏µ‡πà /profile/
    """
    if request.user.is_authenticated:
        if request.user.is_staff:
            # üî• ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô Admin ‡πÑ‡∏õ‡∏ó‡∏µ‡πà Django Admin Site ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
            return redirect('/admin/')
        else:
            # ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤ Profile
            return redirect('shop:profile')
    
    return redirect('shop:index') # ‡∏Å‡∏£‡∏ì‡∏µ‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å

def register(request):
    """‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà"""
    if request.method == 'POST':
        form = UserCreationForm(request.POST)
        if form.is_valid():
            user = form.save()
            # üí° signal ‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á Cart ‡πÉ‡∏´‡πâ user ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
            messages.success(request, '‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö')
            return redirect('shop:login')
        else:
            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô
            for field in form:
                for error in field.errors:
                    messages.error(request, f'{field.label}: {error}')
            for error in form.non_field_errors():
                messages.error(request, error)

    else:
        form = UserCreationForm()
    
    context = {
        'form': form
    }
    return render(request, 'shop/register.html', context)

@login_required
def profile(request):
    """‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"""
    if request.method == 'POST':
        form = UserProfileForm(request.POST, instance=request.user)
        if form.is_valid():
            form.save()
            messages.success(request, '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à')
            return redirect('shop:profile')
    else:
        form = UserProfileForm(instance=request.user)

    context = {
        'form': form,
    }
    return render(request, 'shop/profile.html', context)

# View ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
def logout_done_page(request):
    return render(request, 'shop/logout.html') 


# ----------------------------------------------------------------------
# 2. CUSTOMER FLOW (INDEX, SEARCH, PRODUCT DETAIL)
# ----------------------------------------------------------------------

def index(request):
    """‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
    products = Product.objects.filter(is_active=True).order_by('-created_at')
    
    # Pagination
    paginator = Paginator(products, 12) # 12 ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤
    page_number = request.GET.get('page')
    
    # ‚úÖ FIX: ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô ValueError ‡πÄ‡∏°‡∏∑‡πà‡∏≠ page_number ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏ï‡∏£‡∏¥‡∏á‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤
    if page_number == '':
        page_number = 1 
    
    page_obj = paginator.get_page(page_number)
    
    context = {
        'page_obj': page_obj,
    }
    return render(request, 'shop/index.html', context)

def search_results(request):
    """‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"""
    query = request.GET.get('q')
    products = Product.objects.filter(is_active=True)
    
    if query:
        # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
        products = products.filter(
            Q(name__icontains=query) | Q(description__icontains=query)
        ).distinct()

    # Pagination
    paginator = Paginator(products, 12)
    page_number = request.GET.get('page')
    
    # ‚úÖ FIX: ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô ValueError ‡πÄ‡∏°‡∏∑‡πà‡∏≠ page_number ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏ï‡∏£‡∏¥‡∏á‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤
    if page_number == '':
        page_number = 1 
    
    page_obj = paginator.get_page(page_number)
    
    context = {
        'query': query,
        'page_obj': page_obj,
    }
    return render(request, 'shop/search_results.html', context)

def product_detail(request, pk):
    """‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"""
    product = get_object_or_404(Product, pk=pk, is_active=True)
    
    context = {
        'product': product,
    }
    return render(request, 'shop/product_detail.html', context)

# ----------------------------------------------------------------------
# 3. CART FLOW
# ----------------------------------------------------------------------

@login_required
def view_cart(request):
    """‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"""
    cart = get_object_or_404(Cart, user=request.user)
    cart_items = cart.cartitem_set.all().select_related('product')
    
    context = {
        'cart': cart,
        'cart_items': cart_items,
    }
    return render(request, 'shop/view_cart.html', context)

@login_required
@require_POST
def add_to_cart(request, product_id):
    """‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏•‡∏á‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤"""
    product = get_object_or_404(Product, pk=product_id, is_active=True)
    cart = get_object_or_404(Cart, user=request.user)
    quantity = 1 # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡∏µ‡∏•‡∏∞ 1 ‡∏ä‡∏¥‡πâ‡∏ô
    
    if product.stock < quantity:
        messages.error(request, f'‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ "{product.name}" ‡∏°‡∏µ‡∏™‡∏ï‡πá‡∏≠‡∏Å‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠')
        return redirect('shop:product_detail', pk=product_id)

    cart_item, created = CartItem.objects.get_or_create(
        cart=cart,
        product=product,
        defaults={'quantity': quantity}
    )

    if not created:
        # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô
        new_quantity = cart_item.quantity + quantity
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
        if product.stock >= new_quantity:
            cart_item.quantity = new_quantity
            cart_item.save()
            messages.success(request, f'‡πÄ‡∏û‡∏¥‡πà‡∏° "{product.name}" ‡∏•‡∏á‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß ({new_quantity} ‡∏ä‡∏¥‡πâ‡∏ô)')
        else:
            messages.error(request, f'‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏° "{product.name}" ‡πÑ‡∏î‡πâ ‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏°‡∏µ‡πÄ‡∏û‡∏µ‡∏¢‡∏á {product.stock} ‡∏ä‡∏¥‡πâ‡∏ô')
    else:
        messages.success(request, f'‡πÄ‡∏û‡∏¥‡πà‡∏° "{product.name}" ‡∏•‡∏á‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß')
    
    return redirect('shop:view_cart')

@login_required
def remove_from_cart(request, item_id):
    """‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤"""
    if request.method not in ['POST', 'GET']:
        messages.error(request, '‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á')
        return redirect('shop:view_cart')
    
    cart = get_object_or_404(Cart, user=request.user)
    cart_item = get_object_or_404(CartItem, pk=item_id, cart=cart)
    product_name = cart_item.product.name
    
    cart_item.delete()
    messages.warning(request, f'‡∏•‡∏ö "{product_name}" ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß')
    return redirect('shop:view_cart')

@login_required
@require_POST
def update_cart_quantity(request, product_id):
    """‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö AJAX)"""
    new_quantity = request.POST.get('quantity')
    
    try:
        new_quantity = int(new_quantity)
        if new_quantity <= 0:
            return JsonResponse({'success': False, 'message': '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0'}, status=400)
    except (ValueError, TypeError):
        return JsonResponse({'success': False, 'message': '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á'}, status=400)

    try:
        cart = Cart.objects.get(user=request.user)
        product = Product.objects.get(pk=product_id)
        cart_item = CartItem.objects.get(cart=cart, product=product)

        if new_quantity > product.stock:
            return JsonResponse({'success': False, 'message': f'‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏°‡∏µ‡πÄ‡∏û‡∏µ‡∏¢‡∏á {product.stock} ‡∏ä‡∏¥‡πâ‡∏ô'}, status=400)
        
        cart_item.quantity = new_quantity
        cart_item.save()
        
        subtotal = float(cart_item.subtotal())
        total_price = float(cart.total_price)

        return JsonResponse({
            'success': True, 
            'subtotal': f'{subtotal:,.2f}',
            'total_price': f'{total_price:,.2f}',
            'total_items': cart.total_items
        })

    except (Cart.DoesNotExist, Product.DoesNotExist, CartItem.DoesNotExist):
        return JsonResponse({'success': False, 'message': '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö'}, status=404)
    except Exception as e:
        return JsonResponse({'success': False, 'message': str(e)}, status=500)

# ----------------------------------------------------------------------
# 4. CHECKOUT & ORDER FLOW
# ----------------------------------------------------------------------

@login_required
def checkout(request):
    """‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠"""
    cart = get_object_or_404(Cart, user=request.user)
    cart_items = cart.cartitem_set.all().select_related('product')

    if not cart_items:
        messages.warning(request, '‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤ ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏î‡πâ')
        return redirect('shop:index')

    if request.method == 'POST':
        # ‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡∏à‡∏£‡∏¥‡∏á‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏±‡∏î‡∏™‡πà‡∏á
        # üí° ‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á Order:
        try:
            with transaction.atomic():
                # 1. ‡∏™‡∏£‡πâ‡∏≤‡∏á Order
                order = Order.objects.create(
                    user=request.user,
                    total_amount=cart.total_price,
                    # status ‡πÄ‡∏õ‡πá‡∏ô PENDING (‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô)
                    # ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏±‡∏î‡∏™‡πà‡∏á
                    shipping_address="123 ‡∏ñ‡∏ô‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á, ‡πÄ‡∏Ç‡∏ï‡∏™‡∏°‡∏°‡∏ï‡∏¥, ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏™‡∏°‡∏°‡∏ï‡∏¥, 10000"
                )

                # 2. ‡∏¢‡πâ‡∏≤‡∏¢ CartItem ‡πÑ‡∏õ‡πÄ‡∏õ‡πá‡∏ô OrderItem
                for item in cart_items:
                    if item.product.stock < item.quantity:
                        # Rollback ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏´‡∏≤‡∏Å‡∏™‡∏ï‡πá‡∏≠‡∏Å‡πÑ‡∏°‡πà‡∏û‡∏≠
                        messages.error(request, f'‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ "{item.product.name}" ‡∏°‡∏µ‡∏™‡∏ï‡πá‡∏≠‡∏Å‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠ ({item.product.stock} ‡∏ä‡∏¥‡πâ‡∏ô)')
                        raise Exception("Insufficient stock")

                    OrderItem.objects.create(
                        order=order,
                        product=item.product,
                        price=item.product.price, # ‡πÉ‡∏ä‡πâ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
                        quantity=item.quantity
                    )

                # 3. ‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å Cart
                cart_items.delete()
                
                messages.success(request, f'‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ #{order.id} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô')
                return redirect('shop:payment_process', order_id=order.id)

        except Exception as e:
            # ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÄ‡∏ä‡πà‡∏ô ‡∏™‡∏ï‡πá‡∏≠‡∏Å‡πÑ‡∏°‡πà‡∏û‡∏≠
            print(f"Checkout Error: {e}")
            messages.error(request, '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á')
            return redirect('shop:view_cart')

    context = {
        'cart': cart,
        'cart_items': cart_items,
        # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà/‡∏Ñ‡πà‡∏≤‡∏à‡∏±‡∏î‡∏™‡πà‡∏á (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    }
    return render(request, 'shop/checkout.html', context)


@login_required
def payment_process(request, order_id):
    """‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô"""
    order = get_object_or_404(Order, pk=order_id, user=request.user)
    
    # ‡∏ñ‡πâ‡∏≤ Order ‡∏ñ‡∏π‡∏Å‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    if order.status != 'PENDING' or Payment.objects.filter(order=order, is_successful=True).exists():
        messages.info(request, f'‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ #{order.id} ‡πÑ‡∏î‡πâ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏•‡∏∞‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ "{order.get_status_display()}"')
        return redirect('shop:order_detail', pk=order.id)

    payment, created = Payment.objects.get_or_create(
        order=order,
        defaults={
            'payment_method': 'Simulated QR/Transfer',
            'amount_paid': order.total_amount,
        }
    )

    if request.method == 'POST':
        # üí° ‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
        if not payment.is_successful:
            # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Payment ‡πÅ‡∏•‡∏∞ Order
            payment.is_successful = True
            payment.save()

            order.status = 'CONFIRMED' # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô CONFIRMED 
            order.save()
            
            # üí° Signal ‡∏à‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏±‡∏î‡∏™‡∏ï‡πá‡∏≠‡∏Å
            messages.success(request, f'‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ #{order.id} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß! ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ñ‡∏π‡∏Å‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß')
            return redirect('shop:order_detail', pk=order.id)
        else:
            messages.info(request, f'‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ #{order.id} ‡πÑ‡∏î‡πâ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß')
            return redirect('shop:order_detail', pk=order.id)


    context = {
        'order': order,
        'payment': payment,
    }
    return render(request, 'shop/payment_process.html', context)


@login_required
def my_orders(request):
    """‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"""
    orders = Order.objects.filter(user=request.user).order_by('-created_at')
    
    context = {
        'orders': orders,
    }
    return render(request, 'shop/my_orders.html', context)


@login_required
def order_detail(request, pk):
    """‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠"""
    # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏î‡∏π‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
    order = get_object_or_404(Order, pk=pk, user=request.user)
    
    context = {
        'order': order,
        'order_items': order.items.all().select_related('product'),
    }
    return render(request, 'shop/order_detail.html', context)


# ----------------------------------------------------------------------
# 5. ADMIN MANAGEMENT VIEWS 
# ----------------------------------------------------------------------

@login_required
@user_passes_test(lambda user: user.is_staff)
def admin_dashboard(request: HttpRequest) -> HttpResponse:
    """
    ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö (Admin Dashboard)
    """
    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Dashboard
    total_products = Product.objects.count()
    total_orders = Order.objects.count()
    pending_orders = Order.objects.filter(status='CONFIRMED').count() # ‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡πà‡∏á
    
    recent_orders = Order.objects.select_related('user').order_by('-created_at')[:10]

    context = {
        'total_products': total_products, 
        'total_orders': total_orders,
        'pending_orders': pending_orders,
        'recent_orders': recent_orders,
    }
    return render(request, 'shop/admin_dashboard.html', context) 


@login_required
@user_passes_test(lambda user: user.is_staff)
def manage_products(request):
    """‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
    products = Product.objects.all().order_by('-created_at')
    
    context = {
        'products': products
    }
    return render(request, 'shop/manage_products.html', context)

@login_required
@user_passes_test(lambda user: user.is_staff)
def add_product(request):
    """‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà"""
    if request.method == 'POST':
        # ProductForm ‡∏ñ‡∏π‡∏Å‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÑ‡∏ß‡πâ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡πÉ‡∏ô views.py ‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô
        form = ProductForm(request.POST, request.FILES) 
        if form.is_valid():
            form.save()
            messages.success(request, '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß')
            return redirect('shop:manage_products')
    else:
        form = ProductForm()
        
    context = {
        'form': form,
        'action': 'Add'
    }
    return render(request, 'shop/product_form.html', context)

@login_required
@user_passes_test(lambda user: user.is_staff)
def edit_product(request, pk):
    """‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà"""
    product = get_object_or_404(Product, pk=pk)
    
    if request.method == 'POST':
        # ProductForm ‡∏ñ‡∏π‡∏Å‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÑ‡∏ß‡πâ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡πÉ‡∏ô views.py ‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô
        form = ProductForm(request.POST, request.FILES, instance=product)
        if form.is_valid():
            form.save()
            messages.success(request, f'‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ "{product.name}" ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß')
            return redirect('shop:manage_products')
    else:
        form = ProductForm(instance=product)
        
    context = {
        'form': form,
        'action': 'Edit',
        'product': product
    }
    return render(request, 'shop/product_form.html', context)

@login_required
@user_passes_test(lambda user: user.is_staff)
def delete_product(request, pk):
    """‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"""
    product = get_object_or_404(Product, pk=pk)
    product_name = product.name
    
    if request.method == 'POST':
        # ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á ‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏ö (‡πÄ‡∏ä‡πà‡∏ô ‡πÉ‡∏ä‡πâ Modal)
        product.delete()
        messages.warning(request, f'‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ "{product_name}" ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß')
        return redirect('shop:manage_products')
        
    # ‡∏´‡∏≤‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏î‡πâ‡∏ß‡∏¢ GET (‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô)
    messages.error(request, '‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á')
    return redirect('shop:manage_products')


@login_required
@user_passes_test(lambda user: user.is_staff)
def manage_orders(request):
    """‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Admin"""
    # ‡∏î‡∏∂‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    orders = Order.objects.select_related('user').order_by('-created_at')
    
    # Pagination
    paginator = Paginator(orders, 20)
    page_number = request.GET.get('page')
    page_obj = paginator.get_page(page_number)

    context = {
        'orders': page_obj,
    }
    return render(request, 'shop/manage_orders.html', context)


@login_required
@user_passes_test(lambda user: user.is_staff)
def update_order_status(request, pk):
    """‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Admin)"""
    order = get_object_or_404(Order, pk=pk)
    
    if request.method == 'POST':
        new_status = request.POST.get('status')
        new_tracking_number = request.POST.get('tracking_number', '').strip()
        
        valid_statuses = [choice[0] for choice in Order.STATUS_CHOICES]

        if new_status and new_status in valid_statuses:
            with transaction.atomic():
                order.status = new_status
                
                if new_tracking_number and new_status == 'SHIPPED':
                    order.tracking_number = new_tracking_number
                
                order.save()
                messages.success(request, f'‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ #{order.id} ‡πÄ‡∏õ‡πá‡∏ô "{order.get_status_display()}" ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß')
        else:
            messages.error(request, '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á')
            
    # ‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ‡πÉ‡∏´‡πâ redirect ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå
    return redirect('shop:manage_orders')
